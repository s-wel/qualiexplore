worker_processes  1;

events {
    worker_connections  1024;
}

http {
    server {
        listen 80;

        # include /etc/nginx/ssl.conf.template;

        # add_header Access-Control-Allow-Origin *;
        # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        # add_header Access-Control-Allow-Headers "Content-Type, Authorization";

        root   /usr/share/nginx/html;
        index  index.html index.htm;
        include /etc/nginx/mime.types;

        location /robots.txt {
            return 200 "User-agent: *\nDisallow: /\n";
        }


        # gzip on;
        # gzip_min_length 1000;
        # gzip_proxied expired no-cache no-store private auth;
        # gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        # From here: https://enable-cors.org/server_nginx.html
        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                #
                # Custom headers and headers various browsers *should* be OK with but aren't
                #
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                #
                # Tell client that this pre-flight info is valid for 20 days
                #
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
        }

        # location / {
        #     try_files $uri $uri/ /index.html;
        # }

        location /auth {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
            proxy_pass http://apollo-auth:5000/graphql;
        }

        location /knowledge {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400;
            proxy_pass http://apollo-server-qualiexplore:4000/graphql;
        }

        # https://stackoverflow.com/questions/41381444/websocket-connection-failed-error-during-websocket-handshake-unexpected-respon
        location /aa/socket.io/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            # proxy_ssl_server_name on;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;

            # enable WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_pass http://rasa-production-audit-advisor:5005/socket.io;
        }

        location /qa/socket.io/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            # proxy_ssl_server_name on;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;

            # enable WebSockets
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_pass http://rasa-production-qualiexplore:5005/socket.io;
        }


        # Used during experiments with SSL
        # location /api/wss {
        #     # following https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-nginx-for-websockets/
        #     # This directive converts the incoming connection to HTTP 1.1, which is
        #     # required to support WebSockets. The older HTTP 1.0 spec does not provide support
        #     # for WebSockets, and any requests using HTTP 1.0 will fail.
        #     proxy_http_version 1.1;
        #     # Converts the proxied connection to type Upgrade. WebSockets only communicate on
        #     # Upgraded connections.
        #     proxy_set_header Upgrade $http_upgrade;
        #     # Ensure the Connection header value is upgrade
        #     proxy_set_header Connection "upgrade";
        
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $remote_addr;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header Host $host;
        #     proxy_pass http://rasa-production-audit-advisor:5005/api/ws;
        # }


        location ~ \.html$ {
          add_header Cache-Control "private, no-cache, no-store, must-revalidate";
          add_header Expires "Sat, 01 Jan 2000 00:00:00 GMT";
          add_header Pragma no-cache;
        }
    }
}